{"version":3,"sources":["modules/todos/reducer.ts","components/TodoInsert.tsx","components/TodoItem.tsx","components/TodoList.tsx","containers/TodoApp.tsx","App.tsx","reportWebVitals.ts","modules/counter.ts","modules/index.ts","index.tsx","modules/todos/actions.ts","modules/todos/index.ts"],"names":["todos","createReducer","ADD_TODO","state","action","concat","payload","done","TOGGLE_TODO","id","map","todo","REMOVE_TODO","filter","TodoInsert","onInsert","useState","value","setValue","onSubmit","e","preventDefault","placeholder","onChange","target","type","TodoItem","onToggle","onRemove","textStyle","textDecoration","onClick","style","text","marginLeft","color","TodoList","length","TodoApp","useSelector","dispatch","useDispatch","addTodo","toggleTodo","removeTodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","increase","createAction","decrease","increaseBy","counter","count","handleAction","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","nextId"],"mappings":"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","file":"static/js/main.c13f41bd.chunk.js","sourcesContent":["import { TodosState, TodosAction } from './types';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport { ADD_TODO, TOGGLE_TODO, REMOVE_TODO } from './actions';\r\n\r\n// 초기 상태 선언\r\nconst initialState: TodosState = [];\r\n\r\n// 리듀서 작성\r\nconst todos = createReducer<TodosState, TodosAction>(initialState, {\r\n  [ADD_TODO]: (state, action) =>\r\n    state.concat({\r\n      ...action.payload, // id, text \r\n      done: false\r\n    }),\r\n  // 바구조화 할당을 활용하여 payload 값의 이름 바꿈\r\n  [TOGGLE_TODO]: (state, { payload: id }) =>\r\n    state.map(todo => (todo.id === id ? { ...todo, done: !todo.done } : todo)),\r\n  [REMOVE_TODO]: (state, { payload: id }) =>\r\n    state.filter(todo => todo.id !== id)\r\n});\r\n\r\nexport default todos;","import React, { ChangeEvent, FormEvent, useState } from 'react';\r\n\r\ntype TodoInsertProps = {\r\n  onInsert: (text: string) => void;\r\n};\r\n\r\nfunction TodoInsert({ onInsert }: TodoInsertProps) {\r\n  const [value, setValue] = useState('');\r\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue(e.target.value);\r\n  };\r\n  const onSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    onInsert(value);\r\n    setValue('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요.\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      <button type=\"submit\">등록</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoInsert;","import React, { CSSProperties } from 'react';\r\nimport { Todo } from '../modules/todos';\r\n\r\ntype TodoItemProps = {\r\n  todo: Todo;\r\n  onToggle: (id: number) => void;\r\n  onRemove: (id: number) => void;\r\n};\r\n\r\nfunction TodoItem({ todo, onToggle, onRemove }: TodoItemProps) {\r\n  const textStyle: CSSProperties = {\r\n    textDecoration: todo.done ? 'line-through' : 'none'\r\n  };\r\n  const removeStyle: CSSProperties = {\r\n    marginLeft: 8,\r\n    color: 'red'\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    onToggle(todo.id);\r\n  };\r\n\r\n  const handleRemove = () => {\r\n    onRemove(todo.id);\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <span onClick={handleToggle} style={textStyle}>\r\n        {todo.text}\r\n      </span>\r\n      <span onClick={handleRemove} style={removeStyle}>\r\n        (X)\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport { Todo } from '../modules/todos';\r\nimport TodoItem from './TodoItem';\r\n\r\ntype TodoListProps = {\r\n  todos: Todo[];\r\n  onToggle: (id: number) => void;\r\n  onRemove: (id: number) => void;\r\n};\r\n\r\nfunction TodoList({ todos, onToggle, onRemove }: TodoListProps) {\r\n  if (todos.length === 0) return <p>등록된 항목이 없습니다.</p>;\r\n  return (\r\n    <ul>\r\n      {todos.map(todo => (\r\n        <TodoItem\r\n          todo={todo}\r\n          onToggle={onToggle}\r\n          onRemove={onRemove}\r\n          key={todo.id}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../modules';\r\nimport { toggleTodo, removeTodo, addTodo } from '../modules/todos';\r\nimport TodoInsert from '../components/TodoInsert';\r\nimport TodoList from '../components/TodoList';\r\n\r\nfunction TodoApp() {\r\n  const todos = useSelector((state: RootState) => state.todos);\r\n  const dispatch = useDispatch();\r\n\r\n  const onInsert = (text: string) => {\r\n    dispatch(addTodo(text));\r\n  };\r\n\r\n  const onToggle = (id: number) => {\r\n    dispatch(toggleTodo(id));\r\n  };\r\n\r\n  const onRemove = (id: number) => {\r\n    dispatch(removeTodo(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TodoInsert onInsert={onInsert} />\r\n      <TodoList todos={todos} onToggle={onToggle} onRemove={onRemove} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoApp;","import React from 'react';\nimport TodoApp from './containers/TodoApp';\n\nconst App: React.FC = () => {\n  return <TodoApp />\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createAction, ActionType, createReducer} from 'typesafe-actions';\r\n\r\n\r\n// 액션 타입\r\nconst INCREASE = 'counter/INCREASE';\r\nconst DECREASE = 'counter/DECREASE';\r\nconst INCREASE_BY = 'counter/INCREASE_BY';\r\n\r\n// 액션 생성함수\r\nexport const increase = createAction(INCREASE)();\r\nexport const decrease = createAction(DECREASE)();\r\nexport const increaseBy = createAction(INCREASE_BY)<number>();\r\n\r\n// 이 리덕스 모듈에서 관리 할 상태의 타입을 선언\r\ntype CounterState = {\r\n  count: number;\r\n};\r\n\r\n// 초기상태\r\nconst initialState: CounterState = {\r\n  count: 0\r\n};\r\n\r\n\r\n// 모든 액션 겍체들에 대한 타입\r\nconst actions = { increase, decrease, increaseBy }; \r\ntype CounterAction = ActionType<typeof actions>; \r\n\r\n\r\n\r\n// 리듀서 \r\n// object map 방식으로 구현\r\n// const counter = createReducer<CounterState, CounterAction>(initialState, {\r\n//   [INCREASE]: state => ({ count: state.count + 1 }), \r\n//   [DECREASE]: state => ({ count: state.count - 1 }),\r\n//   [INCREASE_BY]: (state, action) => ({ count: state.count + action.payload }) \r\n// });\r\n\r\n// method chaining 방식으로 구현\r\nconst counter = createReducer<CounterState, CounterAction>(initialState)\r\n  .handleAction(increase, state => ({ count: state.count + 1 }))\r\n  .handleAction(decrease, state => ({ count: state.count - 1 }))\r\n  .handleAction(increaseBy, (state, action) => ({count: state.count + action.payload}));\r\n\r\n\r\n\r\n// function counter(\r\n//   state: CounterState = initialState,\r\n//   action: CounterAction\r\n// ): CounterState {\r\n//   switch (action.type) {\r\n//     case INCREASE: \r\n//     case DECREASE:\r\n//       return { count: state.count - 1 };\r\n//     case INCREASE_BY:\r\n//       return { count: state.count + action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// }\r\n\r\nexport default counter;","import { combineReducers } from 'redux';\r\nimport counter from './counter';\r\nimport todos from './todos';\r\n\r\nconst rootReducer = combineReducers({\r\n  counter,\r\n  todos\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './modules';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createAction} from \"typesafe-actions\";\r\n\r\n\r\n// 액션 타입 선언\r\nexport const ADD_TODO = 'todos/ADD_TODO' as const;//createAction 사용 안할 경우 as const 필수\r\nexport const TOGGLE_TODO = 'todos/TOGGLE_TODO';\r\nexport const REMOVE_TODO = 'todos/REMOVE_TODO';\r\n\r\nlet nextId = 1; // 새로운 항목을 추가 할 때 사용 할 고유 ID 값\r\n\r\n// 액션 생성 함수\r\nexport const addTodo = (text: string) => ({\r\n  type: ADD_TODO,\r\n  payload: {\r\n    id: nextId++,\r\n    text\r\n  }\r\n});\r\n\r\nexport const toggleTodo = createAction(TOGGLE_TODO)<number>();\r\nexport const removeTodo = createAction(REMOVE_TODO)<number>();","export { default } from './reducer'; // reducer 를 불러와서 default로 내보내겠다\r\nexport * from './actions'; // 모든 액션 생성함수들을 불러와서 같은 이름들로 내보내겠다\r\nexport * from './types'; // 모든 타입들을 불러와서 같은 이름들로 내보내겠다"],"sourceRoot":""}